import torch
from torch import nn as nn
import numpy as np
import torch.nn.functional as F
import random
import os
import cv2
class VGG16(nn.Module):
	def __init__(self,num_of_class):
		super(VGG16,self).__init__()
		self.Layer1 = nn.Sequential(
			nn.Conv2d(3,64,kernel_size=3),
			nn.ReLU(inplace=True),
			nn.Conv2d(64,64,kernel_size=3),
			nn.ReLU(inplace=True),
			nn.MaxPool2d(kernel_size=2,stride=2),
			)
		self.Layer2 = nn.Sequential(
			nn.Conv2d(64,128,kernel_size=3),
			nn.ReLU(inplace=True),
			nn.Conv2d(128,128,kernel_size=3),
			nn.ReLU(inplace=True),
			nn.MaxPool2d(kernel_size=2,stride=2),
			)
		self.Layer3 = nn.Sequential(
			nn.Conv2d(128,256,kernel_size=3),
			nn.ReLU(inplace=True),
			nn.Conv2d(256,256,kernel_size=3),
			nn.ReLU(inplace=True),
			nn.Conv2d(256,256,kernel_size=3),
			nn.ReLU(inplace=True),
			nn.MaxPool2d(kernel_size=2,stride=2),
			)
		self.Layer4 = nn.Sequential(
			nn.Conv2d(256,512,kernel_size=3),
			nn.ReLU(inplace=True),
			nn.Conv2d(512,512,kernel_size=3),
			nn.ReLU(inplace=True),
			nn.Conv2d(512,512,kernel_size=3),
			nn.ReLU(inplace=True),
			nn.MaxPool2d(kernel_size=2,stride=2),
			)
		self.Layer5 = nn.Sequential(
			nn.Conv2d(512,512,kernel_size=3),
			nn.ReLU(inplace=True),
			nn.Conv2d(512,512,kernel_size=3),
			nn.ReLU(inplace=True),
			nn.Conv2d(512,512,kernel_size=3),
			nn.ReLU(inplace=True),
			nn.MaxPool2d(kernel_size=2,stride=2),
			)
		self.Layer6 = nn.Sequential(
			nn.Linear(512,4096),
			nn.Dropout(0.5),
			nn.ReLU(inplace=True),
			nn.Linear(4096,4096),
			nn.Dropout(0.5),
			nn.ReLU(inplace=True),
			nn.Linear(4096,num_of_class),
			)
	def forward(self,x):
		x = self.Layer1(x)
		x = self.Layer2(x)
		x = self.Layer3(x)
		x = self.Layer4(x)
		x = self.Layer5(x)
		x = x.view(x.size(0), -1)
		y_pred = self.Layer6(x)
		return y_pred